{"version":3,"sources":["../src/formats.js"],"names":["DIR_NAME","FORMAT_TYPES","init","CODEC_TYPES","errs","fs","readdirSync","path","join","__dirname","filter","file","slice","length","basename","__filename","map","replace","toUpperCase","require","forEach","e","err","validateFormat","push","Error","key","format","propNames","name","undefined","extension","charAt","display","codecs","includes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,YAAjB;AACA,IAAMC,YAAY,GAAG,EAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,WAAD,EAAiB;AAC5B,MAAMC,IAAI,GAAG,EAAb;;AACAC,iBAAGC,WAAH,CAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqBT,QAArB,CAAf,EACGU,MADH,CAEI,UAACC,IAAD;AAAA,WACEA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAc,CAAzB,MAAgC,KAAhC,IACAF,IAAI,KAAKJ,iBAAKO,QAAL,CAAcC,UAAd,CAFX;AAAA,GAFJ,EAMGC,GANH,CAMO,UAACL,IAAD;AAAA,WAAU,CACbA,IAAI,CACDC,KADH,CACS,CADT,EACY,CAAC,CADb,EAEGK,OAFH,CAEW,GAFX,EAEgB,EAFhB,EAGGA,OAHH,CAGW,GAHX,EAGgB,EAHhB,EAIGA,OAJH,CAIW,GAJX,EAIgB,GAJhB,EAKGC,WALH,EADa,EAObC,OAAO,CAACZ,iBAAKC,IAAL,CAAUC,SAAV,EAAqBT,QAArB,EAA+BW,IAA/B,CAAD,CAAP,CAA8CR,WAA9C,CAPa,CAAV;AAAA,GANP,EAeGiB,OAfH,CAeW,UAACC,CAAD,EAAO;AACd,QAAMC,GAAG,GAAGC,cAAc,MAAd,4BAAkBF,CAAlB,EAAZ;;AACA,QAAIC,GAAJ,EAAS;AACPlB,MAAAA,IAAI,CAACoB,IAAL,CAAUF,GAAV;AACD,KAFD,MAEO;AACLrB,MAAAA,YAAY,CAACoB,CAAC,CAAC,CAAD,CAAF,CAAZ,GAAqBA,CAAC,CAAC,CAAD,CAAtB;AACD;AACF,GAtBH;;AAwBA,MAAIjB,IAAI,CAACS,MAAL,KAAgB,CAApB,EACE,MAAM,IAAIY,KAAJ,4CAA8CrB,IAAI,CAACI,IAAL,CAAU,IAAV,CAA9C,EAAN;AAEF,SAAOP,YAAP;AACD,CA9BD;;AAgCA,IAAMsB,cAAc,GAAG,SAAjBA,cAAiB,CAACG,GAAD,EAAMC,MAAN,EAAiB;AACtC,MAAMC,SAAS,GAAG,CAAC,MAAD,EAAS,WAAT,EAAsB,SAAtB,EAAiC,QAAjC,CAAlB;AACA,MAAIN,GAAJ;AACAM,EAAAA,SAAS,CAACR,OAAV,CAAkB,UAACS,IAAD,EAAU;AAC1B,QAAIF,MAAM,CAACE,IAAD,CAAN,KAAiB,IAAjB,IAAyBF,MAAM,CAACE,IAAD,CAAN,KAAiBC,SAA9C,EACER,GAAG,GAAG,IAAIG,KAAJ,6CAA+CI,IAA/C,EAAN;AACH,GAHD;AAKA,MAAIP,GAAJ,EAAS,OAAOA,GAAP;AAET,MAAIK,MAAM,CAACI,SAAP,CAAiBC,MAAjB,CAAwB,CAAxB,MAA+B,GAAnC,EAAwC,OAAO,IAAIP,KAAJ,CAAU,mBAAV,CAAP;AACxC,MAAIE,MAAM,CAACM,OAAP,KAAmB,IAAnB,IAA2BN,MAAM,CAACM,OAAP,KAAmB,KAAlD,EACE,OAAO,IAAIR,KAAJ,CAAU,2BAAV,CAAP;AACF,MAAIE,MAAM,CAACO,MAAP,CAAcC,QAAd,CAAuBL,SAAvB,CAAJ,EAAuC,OAAO,IAAIL,KAAJ,CAAU,eAAV,CAAP;AAEvC,MAAIxB,YAAY,CAACyB,GAAD,CAAhB,EACE,OAAO,IAAID,KAAJ,6BAA+BC,GAA/B,sBAAP;AACH,CAjBD;;eAmBexB,IAAI,CAACgC,kBAAD,C","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport codecs from \"./codecs\";\n\nconst DIR_NAME = \"../formats\";\nconst FORMAT_TYPES = {};\n\nconst init = (CODEC_TYPES) => {\n  const errs = [];\n  fs.readdirSync(path.join(__dirname, DIR_NAME))\n    .filter(\n      (file) =>\n        file.slice(file.length - 3) === \".js\" &&\n        file !== path.basename(__filename)\n    )\n    .map((file) => [\n      file\n        .slice(0, -3)\n        .replace(\"-\", \"\")\n        .replace(\".\", \"\")\n        .replace(\" \", \"_\")\n        .toUpperCase(),\n      require(path.join(__dirname, DIR_NAME, file))(CODEC_TYPES),\n    ])\n    .forEach((e) => {\n      const err = validateFormat(...e);\n      if (err) {\n        errs.push(err);\n      } else {\n        FORMAT_TYPES[e[0]] = e[1];\n      }\n    });\n\n  if (errs.length !== 0)\n    throw new Error(`Error(s) occurred while parsing: ${errs.join(\", \")}`);\n\n  return FORMAT_TYPES;\n};\n\nconst validateFormat = (key, format) => {\n  const propNames = [\"name\", \"extension\", \"display\", \"codecs\"];\n  let err;\n  propNames.forEach((name) => {\n    if (format[name] === null || format[name] === undefined)\n      err = new Error(`Missing required format property: ${name}`);\n  });\n\n  if (err) return err;\n\n  if (format.extension.charAt(0) !== \".\") return new Error(\"Invalid extension\");\n  if (format.display !== true && format.display !== false)\n    return new Error(\"Invalid value for display\");\n  if (format.codecs.includes(undefined)) return new Error(\"Invalid codec\");\n\n  if (FORMAT_TYPES[key])\n    return new Error(`Format type for: (${key}) already exists`);\n};\n\nexport default init(codecs);\n"],"file":"formats.js"}