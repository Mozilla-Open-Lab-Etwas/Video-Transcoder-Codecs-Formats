{"version":3,"sources":["../src/codecs.js"],"names":["DIR_NAME","CODEC_TYPES","init","errs","fs","readdirSync","path","join","__dirname","filter","file","slice","length","basename","__filename","map","replace","toUpperCase","require","forEach","e","err","validateCodec","push","Error","key","codec","propNames","name","undefined","compressionRange","min","max","deleteCodecTypes"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,WAAjB;AACA,IAAIC,WAAW,GAAG,EAAlB;;AAEO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACxB,MAAMC,IAAI,GAAG,EAAb;;AACAC,iBAAGC,WAAH,CAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqBR,QAArB,CAAf,EACGS,MADH,CAEI,UAACC,IAAD;AAAA,WACEA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAc,CAAzB,MAAgC,KAAhC,IACAF,IAAI,KAAKJ,iBAAKO,QAAL,CAAcC,UAAd,CAFX;AAAA,GAFJ,EAMGC,GANH,CAMO,UAACL,IAAD;AAAA,WAAU,CACbA,IAAI,CACDC,KADH,CACS,CADT,EACY,CAAC,CADb,EAEGK,OAFH,CAEW,GAFX,EAEgB,EAFhB,EAGGA,OAHH,CAGW,GAHX,EAGgB,EAHhB,EAIGA,OAJH,CAIW,GAJX,EAIgB,GAJhB,EAKGC,WALH,EADa,EAObC,OAAO,CAACZ,iBAAKC,IAAL,CAAUC,SAAV,EAAqBR,QAArB,EAA+BU,IAA/B,CAAD,CAPM,CAAV;AAAA,GANP,EAeGS,OAfH,CAeW,UAACC,CAAD,EAAO;AACd,QAAMC,GAAG,GAAGC,aAAa,MAAb,4BAAiBF,CAAjB,EAAZ;;AACA,QAAIC,GAAJ,EAAS;AACPlB,MAAAA,IAAI,CAACoB,IAAL,CAAUF,GAAV;AACD,KAFD,MAEO;AACLpB,MAAAA,WAAW,CAACmB,CAAC,CAAC,CAAD,CAAF,CAAX,GAAoBA,CAAC,CAAC,CAAD,CAArB;AACD;AACF,GAtBH;;AAwBA,MAAIjB,IAAI,CAACS,MAAL,KAAgB,CAApB,EACE,MAAM,IAAIY,KAAJ,4CAA8CrB,IAAI,CAACI,IAAL,CAAU,IAAV,CAA9C,EAAN;AACH,CA5BM;;;;AA8BA,IAAMe,aAAa,GAAG,SAAhBA,aAAgB,CAACG,GAAD,EAAMC,KAAN,EAAgB;AAC3C,MAAMC,SAAS,GAAG,CAAC,MAAD,EAAS,kBAAT,EAA6B,WAA7B,CAAlB;AACA,MAAIN,GAAJ;AACAM,EAAAA,SAAS,CAACR,OAAV,CAAkB,UAACS,IAAD,EAAU;AAC1B,QAAIF,KAAK,CAACE,IAAD,CAAL,KAAgB,IAAhB,IAAwBF,KAAK,CAACE,IAAD,CAAL,KAAgBC,SAA5C,EACER,GAAG,GAAG,IAAIG,KAAJ,4CAA8CI,IAA9C,EAAN;AACH,GAHD;AAKA,MAAIP,GAAJ,EAAS,OAAOA,GAAP;AAET,MAAI,CAACK,KAAK,CAACI,gBAAN,CAAuBC,GAAxB,IAA+B,CAACL,KAAK,CAACI,gBAAN,CAAuBE,GAA3D,EACE,OAAO,IAAIR,KAAJ,CAAU,2BAAV,CAAP;AAEF,MAAIvB,WAAW,CAACwB,GAAD,CAAf,EACE,OAAO,IAAID,KAAJ,4BAA8BC,GAA9B,sBAAP;AACH,CAfM;;;;AAiBA,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpChC,EAAAA,WAAW,GAAG,EAAd;AACD,CAFM;;;AAIPC,IAAI;eAEWD,W,EAEf","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nconst DIR_NAME = \"../codecs\";\nlet CODEC_TYPES = {};\n\nexport const init = () => {\n  const errs = [];\n  fs.readdirSync(path.join(__dirname, DIR_NAME))\n    .filter(\n      (file) =>\n        file.slice(file.length - 3) === \".js\" &&\n        file !== path.basename(__filename)\n    )\n    .map((file) => [\n      file\n        .slice(0, -3)\n        .replace(\"-\", \"\")\n        .replace(\".\", \"\")\n        .replace(\" \", \"_\")\n        .toUpperCase(),\n      require(path.join(__dirname, DIR_NAME, file)),\n    ])\n    .forEach((e) => {\n      const err = validateCodec(...e);\n      if (err) {\n        errs.push(err);\n      } else {\n        CODEC_TYPES[e[0]] = e[1];\n      }\n    });\n\n  if (errs.length !== 0)\n    throw new Error(`Error(s) occurred while parsing: ${errs.join(\", \")}`);\n};\n\nexport const validateCodec = (key, codec) => {\n  const propNames = [\"name\", \"compressionRange\", \"ffmpegLib\"];\n  let err;\n  propNames.forEach((name) => {\n    if (codec[name] === null || codec[name] === undefined)\n      err = new Error(`Missing required codec property: ${name}`);\n  });\n\n  if (err) return err;\n\n  if (!codec.compressionRange.min || !codec.compressionRange.max)\n    return new Error(\"Invalid compression range\");\n\n  if (CODEC_TYPES[key])\n    return new Error(`Codec type for: (${key}) already exists`);\n};\n\nexport const deleteCodecTypes = () => {\n  CODEC_TYPES = {};\n};\n\ninit();\n\nexport default CODEC_TYPES;\n\n//export { validateCodec };\n"],"file":"codecs.js"}