{"version":3,"sources":["../src/codecs.js"],"names":["fs","require","path","DIR_NAME","CODEC_TYPES","init","errs","readdirSync","join","__dirname","filter","file","slice","length","basename","__filename","map","replace","toUpperCase","forEach","e","err","validateCodec","push","Error","key","codec","propNames","name","undefined","compressionRange","min","max","deleteCodecTypes"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,QAAQ,GAAG,WAAjB;AACA,IAAIC,WAAW,GAAG,EAAlB;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AACxB,QAAMC,IAAI,GAAG,EAAb;AACAN,EAAAA,EAAE,CAACO,WAAH,CAAeL,IAAI,CAACM,IAAL,CAAUC,SAAV,EAAqBN,QAArB,CAAf,EACGO,MADH,CAEKC,IAAD,IACEA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAc,CAAzB,MAAgC,KAAhC,IACAF,IAAI,KAAKT,IAAI,CAACY,QAAL,CAAcC,UAAd,CAJf,EAMGC,GANH,CAMQL,IAAD,IAAU,CACbA,IAAI,CACDC,KADH,CACS,CADT,EACY,CAAC,CADb,EAEGK,OAFH,CAEW,GAFX,EAEgB,EAFhB,EAGGA,OAHH,CAGW,GAHX,EAGgB,EAHhB,EAIGA,OAJH,CAIW,GAJX,EAIgB,GAJhB,EAKGC,WALH,EADa,EAObjB,OAAO,CAACC,IAAI,CAACM,IAAL,CAAUC,SAAV,EAAqBN,QAArB,EAA+BQ,IAA/B,CAAD,CAPM,CANjB,EAeGQ,OAfH,CAeYC,CAAD,IAAO;AACd,UAAMC,GAAG,GAAGC,aAAa,CAAC,GAAGF,CAAJ,CAAzB;;AACA,QAAIC,GAAJ,EAAS;AACPf,MAAAA,IAAI,CAACiB,IAAL,CAAUF,GAAV;AACD,KAFD,MAEO;AACLjB,MAAAA,WAAW,CAACgB,CAAC,CAAC,CAAD,CAAF,CAAX,GAAoBA,CAAC,CAAC,CAAD,CAArB;AACD;AACF,GAtBH;AAwBA,MAAId,IAAI,CAACO,MAAL,KAAgB,CAApB,EACE,MAAM,IAAIW,KAAJ,CAAW,oCAAmClB,IAAI,CAACE,IAAL,CAAU,IAAV,CAAgB,EAA9D,CAAN;AACH,CA5BM;AA8BP,OAAO,MAAMc,aAAa,GAAG,CAACG,GAAD,EAAMC,KAAN,KAAgB;AAC3C,QAAMC,SAAS,GAAG,CAAC,MAAD,EAAS,kBAAT,EAA6B,WAA7B,CAAlB;AACA,MAAIN,GAAJ;AACAM,EAAAA,SAAS,CAACR,OAAV,CAAmBS,IAAD,IAAU;AAC1B,QAAIF,KAAK,CAACE,IAAD,CAAL,KAAgB,IAAhB,IAAwBF,KAAK,CAACE,IAAD,CAAL,KAAgBC,SAA5C,EACER,GAAG,GAAG,IAAIG,KAAJ,CAAW,oCAAmCI,IAAK,EAAnD,CAAN;AACH,GAHD;AAKA,MAAIP,GAAJ,EAAS,OAAOA,GAAP;AAET,MAAI,CAACK,KAAK,CAACI,gBAAN,CAAuBC,GAAxB,IAA+B,CAACL,KAAK,CAACI,gBAAN,CAAuBE,GAA3D,EACE,OAAO,IAAIR,KAAJ,CAAU,2BAAV,CAAP;AAEF,MAAIpB,WAAW,CAACqB,GAAD,CAAf,EACE,OAAO,IAAID,KAAJ,CAAW,oBAAmBC,GAAI,kBAAlC,CAAP;AACH,CAfM;AAiBP,OAAO,MAAMQ,gBAAgB,GAAG,MAAM;AACpC7B,EAAAA,WAAW,GAAG,EAAd;AACD,CAFM;AAIPC,IAAI;AAEJ,eAAeD,WAAf","sourcesContent":["const fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst DIR_NAME = \"../codecs\";\nlet CODEC_TYPES = {};\n\nexport const init = () => {\n  const errs = [];\n  fs.readdirSync(path.join(__dirname, DIR_NAME))\n    .filter(\n      (file) =>\n        file.slice(file.length - 3) === \".js\" &&\n        file !== path.basename(__filename)\n    )\n    .map((file) => [\n      file\n        .slice(0, -3)\n        .replace(\"-\", \"\")\n        .replace(\".\", \"\")\n        .replace(\" \", \"_\")\n        .toUpperCase(),\n      require(path.join(__dirname, DIR_NAME, file)),\n    ])\n    .forEach((e) => {\n      const err = validateCodec(...e);\n      if (err) {\n        errs.push(err);\n      } else {\n        CODEC_TYPES[e[0]] = e[1];\n      }\n    });\n\n  if (errs.length !== 0)\n    throw new Error(`Error(s) occurred while parsing: ${errs.join(\", \")}`);\n};\n\nexport const validateCodec = (key, codec) => {\n  const propNames = [\"name\", \"compressionRange\", \"ffmpegLib\"];\n  let err;\n  propNames.forEach((name) => {\n    if (codec[name] === null || codec[name] === undefined)\n      err = new Error(`Missing required codec property: ${name}`);\n  });\n\n  if (err) return err;\n\n  if (!codec.compressionRange.min || !codec.compressionRange.max)\n    return new Error(\"Invalid compression range\");\n\n  if (CODEC_TYPES[key])\n    return new Error(`Codec type for: (${key}) already exists`);\n};\n\nexport const deleteCodecTypes = () => {\n  CODEC_TYPES = {};\n};\n\ninit();\n\nexport default CODEC_TYPES;\n"],"file":"codecs.js"}